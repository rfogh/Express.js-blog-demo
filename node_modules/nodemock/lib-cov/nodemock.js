/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['nodemock.js']) {
  _$jscoverage['nodemock.js'] = [];
  _$jscoverage['nodemock.js'][27] = 0;
  _$jscoverage['nodemock.js'][29] = 0;
  _$jscoverage['nodemock.js'][30] = 0;
  _$jscoverage['nodemock.js'][32] = 0;
  _$jscoverage['nodemock.js'][34] = 0;
  _$jscoverage['nodemock.js'][36] = 0;
  _$jscoverage['nodemock.js'][39] = 0;
  _$jscoverage['nodemock.js'][40] = 0;
  _$jscoverage['nodemock.js'][42] = 0;
  _$jscoverage['nodemock.js'][44] = 0;
  _$jscoverage['nodemock.js'][45] = 0;
  _$jscoverage['nodemock.js'][49] = 0;
  _$jscoverage['nodemock.js'][52] = 0;
  _$jscoverage['nodemock.js'][54] = 0;
  _$jscoverage['nodemock.js'][56] = 0;
  _$jscoverage['nodemock.js'][57] = 0;
  _$jscoverage['nodemock.js'][59] = 0;
  _$jscoverage['nodemock.js'][61] = 0;
  _$jscoverage['nodemock.js'][62] = 0;
  _$jscoverage['nodemock.js'][63] = 0;
  _$jscoverage['nodemock.js'][64] = 0;
  _$jscoverage['nodemock.js'][65] = 0;
  _$jscoverage['nodemock.js'][66] = 0;
  _$jscoverage['nodemock.js'][67] = 0;
  _$jscoverage['nodemock.js'][68] = 0;
  _$jscoverage['nodemock.js'][72] = 0;
  _$jscoverage['nodemock.js'][74] = 0;
  _$jscoverage['nodemock.js'][75] = 0;
  _$jscoverage['nodemock.js'][77] = 0;
  _$jscoverage['nodemock.js'][82] = 0;
  _$jscoverage['nodemock.js'][83] = 0;
  _$jscoverage['nodemock.js'][87] = 0;
  _$jscoverage['nodemock.js'][88] = 0;
  _$jscoverage['nodemock.js'][89] = 0;
  _$jscoverage['nodemock.js'][91] = 0;
  _$jscoverage['nodemock.js'][92] = 0;
  _$jscoverage['nodemock.js'][93] = 0;
  _$jscoverage['nodemock.js'][95] = 0;
  _$jscoverage['nodemock.js'][100] = 0;
  _$jscoverage['nodemock.js'][104] = 0;
  _$jscoverage['nodemock.js'][105] = 0;
  _$jscoverage['nodemock.js'][106] = 0;
  _$jscoverage['nodemock.js'][107] = 0;
  _$jscoverage['nodemock.js'][110] = 0;
  _$jscoverage['nodemock.js'][111] = 0;
  _$jscoverage['nodemock.js'][112] = 0;
  _$jscoverage['nodemock.js'][113] = 0;
  _$jscoverage['nodemock.js'][115] = 0;
  _$jscoverage['nodemock.js'][118] = 0;
  _$jscoverage['nodemock.js'][119] = 0;
  _$jscoverage['nodemock.js'][120] = 0;
  _$jscoverage['nodemock.js'][121] = 0;
  _$jscoverage['nodemock.js'][124] = 0;
  _$jscoverage['nodemock.js'][125] = 0;
  _$jscoverage['nodemock.js'][126] = 0;
  _$jscoverage['nodemock.js'][127] = 0;
  _$jscoverage['nodemock.js'][129] = 0;
  _$jscoverage['nodemock.js'][130] = 0;
  _$jscoverage['nodemock.js'][131] = 0;
  _$jscoverage['nodemock.js'][133] = 0;
  _$jscoverage['nodemock.js'][137] = 0;
  _$jscoverage['nodemock.js'][140] = 0;
  _$jscoverage['nodemock.js'][142] = 0;
  _$jscoverage['nodemock.js'][143] = 0;
  _$jscoverage['nodemock.js'][145] = 0;
  _$jscoverage['nodemock.js'][146] = 0;
  _$jscoverage['nodemock.js'][147] = 0;
  _$jscoverage['nodemock.js'][150] = 0;
  _$jscoverage['nodemock.js'][151] = 0;
  _$jscoverage['nodemock.js'][154] = 0;
  _$jscoverage['nodemock.js'][158] = 0;
  _$jscoverage['nodemock.js'][160] = 0;
  _$jscoverage['nodemock.js'][161] = 0;
  _$jscoverage['nodemock.js'][162] = 0;
  _$jscoverage['nodemock.js'][163] = 0;
  _$jscoverage['nodemock.js'][164] = 0;
  _$jscoverage['nodemock.js'][165] = 0;
  _$jscoverage['nodemock.js'][166] = 0;
  _$jscoverage['nodemock.js'][173] = 0;
  _$jscoverage['nodemock.js'][176] = 0;
  _$jscoverage['nodemock.js'][177] = 0;
  _$jscoverage['nodemock.js'][178] = 0;
  _$jscoverage['nodemock.js'][179] = 0;
  _$jscoverage['nodemock.js'][184] = 0;
  _$jscoverage['nodemock.js'][186] = 0;
  _$jscoverage['nodemock.js'][188] = 0;
  _$jscoverage['nodemock.js'][190] = 0;
  _$jscoverage['nodemock.js'][192] = 0;
  _$jscoverage['nodemock.js'][194] = 0;
  _$jscoverage['nodemock.js'][197] = 0;
  _$jscoverage['nodemock.js'][208] = 0;
  _$jscoverage['nodemock.js'][215] = 0;
  _$jscoverage['nodemock.js'][216] = 0;
  _$jscoverage['nodemock.js'][217] = 0;
  _$jscoverage['nodemock.js'][218] = 0;
  _$jscoverage['nodemock.js'][224] = 0;
  _$jscoverage['nodemock.js'][225] = 0;
  _$jscoverage['nodemock.js'][226] = 0;
  _$jscoverage['nodemock.js'][228] = 0;
  _$jscoverage['nodemock.js'][242] = 0;
  _$jscoverage['nodemock.js'][243] = 0;
  _$jscoverage['nodemock.js'][244] = 0;
  _$jscoverage['nodemock.js'][250] = 0;
  _$jscoverage['nodemock.js'][252] = 0;
  _$jscoverage['nodemock.js'][256] = 0;
  _$jscoverage['nodemock.js'][257] = 0;
  _$jscoverage['nodemock.js'][258] = 0;
  _$jscoverage['nodemock.js'][259] = 0;
  _$jscoverage['nodemock.js'][261] = 0;
  _$jscoverage['nodemock.js'][264] = 0;
  _$jscoverage['nodemock.js'][265] = 0;
  _$jscoverage['nodemock.js'][268] = 0;
  _$jscoverage['nodemock.js'][269] = 0;
  _$jscoverage['nodemock.js'][272] = 0;
  _$jscoverage['nodemock.js'][274] = 0;
  _$jscoverage['nodemock.js'][275] = 0;
  _$jscoverage['nodemock.js'][276] = 0;
  _$jscoverage['nodemock.js'][277] = 0;
  _$jscoverage['nodemock.js'][278] = 0;
  _$jscoverage['nodemock.js'][279] = 0;
  _$jscoverage['nodemock.js'][280] = 0;
  _$jscoverage['nodemock.js'][282] = 0;
  _$jscoverage['nodemock.js'][286] = 0;
  _$jscoverage['nodemock.js'][287] = 0;
  _$jscoverage['nodemock.js'][289] = 0;
  _$jscoverage['nodemock.js'][291] = 0;
  _$jscoverage['nodemock.js'][293] = 0;
  _$jscoverage['nodemock.js'][295] = 0;
  _$jscoverage['nodemock.js'][297] = 0;
  _$jscoverage['nodemock.js'][299] = 0;
  _$jscoverage['nodemock.js'][300] = 0;
  _$jscoverage['nodemock.js'][302] = 0;
  _$jscoverage['nodemock.js'][303] = 0;
  _$jscoverage['nodemock.js'][304] = 0;
  _$jscoverage['nodemock.js'][305] = 0;
  _$jscoverage['nodemock.js'][306] = 0;
  _$jscoverage['nodemock.js'][308] = 0;
  _$jscoverage['nodemock.js'][312] = 0;
  _$jscoverage['nodemock.js'][313] = 0;
  _$jscoverage['nodemock.js'][316] = 0;
  _$jscoverage['nodemock.js'][321] = 0;
  _$jscoverage['nodemock.js'][323] = 0;
  _$jscoverage['nodemock.js'][324] = 0;
  _$jscoverage['nodemock.js'][327] = 0;
  _$jscoverage['nodemock.js'][328] = 0;
  _$jscoverage['nodemock.js'][331] = 0;
  _$jscoverage['nodemock.js'][332] = 0;
  _$jscoverage['nodemock.js'][333] = 0;
  _$jscoverage['nodemock.js'][334] = 0;
}
_$jscoverage['nodemock.js'][27]++;
function NodeMock(methodName) {
  _$jscoverage['nodemock.js'][29]++;
  var self = this;
  _$jscoverage['nodemock.js'][30]++;
  var currentMockFunction = null;
  _$jscoverage['nodemock.js'][32]++;
  var entries = {};
  _$jscoverage['nodemock.js'][34]++;
  var mockFunction = (function (method, avoid) {
  _$jscoverage['nodemock.js'][36]++;
  function getValidEntry(args) {
    _$jscoverage['nodemock.js'][39]++;
    for (var index in entries[method]) {
      _$jscoverage['nodemock.js'][40]++;
      entry = entries[method][index];
      _$jscoverage['nodemock.js'][42]++;
      if (entry.executed == false && deepObjectCheck(entry.args, args)) {
        _$jscoverage['nodemock.js'][44]++;
        entry.executed = true;
        _$jscoverage['nodemock.js'][45]++;
        return entry;
      }
}
    _$jscoverage['nodemock.js'][49]++;
    return false;
}
  _$jscoverage['nodemock.js'][52]++;
  return (function () {
  _$jscoverage['nodemock.js'][54]++;
  var entry;
  _$jscoverage['nodemock.js'][56]++;
  if (! self[method]) {
    _$jscoverage['nodemock.js'][57]++;
    throw new Error("Mock function '" + method + "()' is not defined");
  }
  else {
    _$jscoverage['nodemock.js'][59]++;
    if (! (entry = getValidEntry(arguments))) {
      _$jscoverage['nodemock.js'][61]++;
      var expected = "";
      _$jscoverage['nodemock.js'][62]++;
      var alreadyExecuted = false;
      _$jscoverage['nodemock.js'][63]++;
      for (var key in entries[method]) {
        _$jscoverage['nodemock.js'][64]++;
        var entry = entries[method][key];
        _$jscoverage['nodemock.js'][65]++;
        if (entry.executed == false) {
          _$jscoverage['nodemock.js'][66]++;
          expected += "\n\t" + getParamString(entry.args);
        }
        else {
          _$jscoverage['nodemock.js'][67]++;
          if (deepObjectCheck(entry.args, arguments)) {
            _$jscoverage['nodemock.js'][68]++;
            alreadyExecuted = true;
          }
        }
}
      _$jscoverage['nodemock.js'][72]++;
      expected += "\n";
      _$jscoverage['nodemock.js'][74]++;
      if (alreadyExecuted) {
        _$jscoverage['nodemock.js'][75]++;
        throw new Error("method: " + method + getParamString(arguments) + " already executed");
      }
      else {
        _$jscoverage['nodemock.js'][77]++;
        throw new Error("Arguments content passed: " + getParamString(arguments) + " is not tally with expected: " + expected + " in method: '" + method + "()'");
      }
    }
    else {
      _$jscoverage['nodemock.js'][82]++;
      if (entry.shouldFail) {
        _$jscoverage['nodemock.js'][83]++;
        throw new Error("You should not call: '" + method + "()' with params: " + getParamString(arguments) + " on this object");
      }
    }
  }
  _$jscoverage['nodemock.js'][87]++;
  if (entry.callbackIndex != null) {
    _$jscoverage['nodemock.js'][88]++;
    var func = arguments[entry.callbackIndex];
    _$jscoverage['nodemock.js'][89]++;
    entry.callback = func;
    _$jscoverage['nodemock.js'][91]++;
    if (entry.callbackArgs) {
      _$jscoverage['nodemock.js'][92]++;
      if (typeof func == "function") {
        _$jscoverage['nodemock.js'][93]++;
        func.apply(this, entry.callbackArgs || []);
      }
      else {
        _$jscoverage['nodemock.js'][95]++;
        throw new Error("Expected callback is not defined as callback");
      }
    }
  }
  _$jscoverage['nodemock.js'][100]++;
  return entry.returns;
});
});
  _$jscoverage['nodemock.js'][104]++;
  this.takes = (function () {
  _$jscoverage['nodemock.js'][105]++;
  var entry = getCurrentEntry();
  _$jscoverage['nodemock.js'][106]++;
  entry.args = arguments;
  _$jscoverage['nodemock.js'][107]++;
  return this;
});
  _$jscoverage['nodemock.js'][110]++;
  this.times = (function (expected) {
  _$jscoverage['nodemock.js'][111]++;
  var entry = getCurrentEntry();
  _$jscoverage['nodemock.js'][112]++;
  for (var lc = 0; lc < expected - 1; lc++) {
    _$jscoverage['nodemock.js'][113]++;
    addEntry(cloneEntry(entry));
}
  _$jscoverage['nodemock.js'][115]++;
  return this;
});
  _$jscoverage['nodemock.js'][118]++;
  this.returns = (function (value) {
  _$jscoverage['nodemock.js'][119]++;
  var entry = getCurrentEntry();
  _$jscoverage['nodemock.js'][120]++;
  entry.returns = value;
  _$jscoverage['nodemock.js'][121]++;
  return this;
});
  _$jscoverage['nodemock.js'][124]++;
  this.ctrl = (function (index, obj) {
  _$jscoverage['nodemock.js'][125]++;
  var entry = getCurrentEntry();
  _$jscoverage['nodemock.js'][126]++;
  entry.callbackIndex = index;
  _$jscoverage['nodemock.js'][127]++;
  entry.callbackArgs = false;
  _$jscoverage['nodemock.js'][129]++;
  obj.trigger = (function () {
  _$jscoverage['nodemock.js'][130]++;
  if (entry.callback) {
    _$jscoverage['nodemock.js'][131]++;
    entry.callback.apply(this, arguments);
  }
  else {
    _$jscoverage['nodemock.js'][133]++;
    throw new Error("There is no callback to control");
  }
});
  _$jscoverage['nodemock.js'][137]++;
  return this;
});
  _$jscoverage['nodemock.js'][140]++;
  this.calls = (function () {
  _$jscoverage['nodemock.js'][142]++;
  if (typeof arguments[0] == "number") {
    _$jscoverage['nodemock.js'][143]++;
    var entry = entries[currentMockFunction][entries[currentMockFunction].length - 1];
    _$jscoverage['nodemock.js'][145]++;
    entry.callbackIndex = arguments[0];
    _$jscoverage['nodemock.js'][146]++;
    if (arguments[1] && (arguments[1] instanceof Array)) {
      _$jscoverage['nodemock.js'][147]++;
      entry.callbackArgs = arguments[1];
    }
    _$jscoverage['nodemock.js'][150]++;
    return this;
  }
  else {
    _$jscoverage['nodemock.js'][151]++;
    if (arguments[0] instanceof Object) {
    }
    else {
      _$jscoverage['nodemock.js'][154]++;
      throw new Error("First arg of the calls() should be the index of the callback");
    }
  }
});
  _$jscoverage['nodemock.js'][158]++;
  this.assert = (function () {
  _$jscoverage['nodemock.js'][160]++;
  var success = true;
  _$jscoverage['nodemock.js'][161]++;
  for (var method in entries) {
    _$jscoverage['nodemock.js'][162]++;
    var entriesForMethod = entries[method];
    _$jscoverage['nodemock.js'][163]++;
    entriesForMethod.forEach((function (entry) {
  _$jscoverage['nodemock.js'][164]++;
  if (entry.executed == false) {
    _$jscoverage['nodemock.js'][165]++;
    success = false;
    _$jscoverage['nodemock.js'][166]++;
    console.error("method call for: '" + method + "()' with params: " + getParamString(entry.args) + " was not executed!\n");
  }
}));
}
  _$jscoverage['nodemock.js'][173]++;
  return success;
});
  _$jscoverage['nodemock.js'][176]++;
  this.assertThrows = (function () {
  _$jscoverage['nodemock.js'][177]++;
  var success = this.assert();
  _$jscoverage['nodemock.js'][178]++;
  if (! success) {
    _$jscoverage['nodemock.js'][179]++;
    throw new Error("Nodemock rules breaked!");
  }
});
  _$jscoverage['nodemock.js'][184]++;
  this.mock = (function (method) {
  _$jscoverage['nodemock.js'][186]++;
  if (method) {
    _$jscoverage['nodemock.js'][188]++;
    currentMockFunction = method;
    _$jscoverage['nodemock.js'][190]++;
    if (! this[method]) {
      _$jscoverage['nodemock.js'][192]++;
      entries[currentMockFunction] = [];
      _$jscoverage['nodemock.js'][194]++;
      this[method] = mockFunction(method);
    }
    _$jscoverage['nodemock.js'][197]++;
    addEntry({args: [], callback: null, callbackIndex: null, callbackArgs: [], returns: undefined, executed: false, shouldFail: false});
  }
  _$jscoverage['nodemock.js'][208]++;
  return this;
});
  _$jscoverage['nodemock.js'][215]++;
  this.fail = (function () {
  _$jscoverage['nodemock.js'][216]++;
  var entry = getCurrentEntry();
  _$jscoverage['nodemock.js'][217]++;
  entry.shouldFail = true;
  _$jscoverage['nodemock.js'][218]++;
  return this;
});
  _$jscoverage['nodemock.js'][224]++;
  this.reset = (function () {
  _$jscoverage['nodemock.js'][225]++;
  entries = {};
  _$jscoverage['nodemock.js'][226]++;
  currentMockFunction = null;
  _$jscoverage['nodemock.js'][228]++;
  var bypass = {"takes": true, "times": true, "returns": true, "ctrl": true, "calls": true, "assert": true, "assertThrows": true, "mock": true, "fail": true, "reset": true, "ignore": true};
  _$jscoverage['nodemock.js'][242]++;
  for (var key in this) {
    _$jscoverage['nodemock.js'][243]++;
    if (! bypass[key]) {
      _$jscoverage['nodemock.js'][244]++;
      delete this[key];
    }
}
});
  _$jscoverage['nodemock.js'][250]++;
  this.ignore = (function (method) {
  _$jscoverage['nodemock.js'][252]++;
  this[method] = (function () {
});
});
  _$jscoverage['nodemock.js'][256]++;
  function cloneEntry(entry) {
    _$jscoverage['nodemock.js'][257]++;
    var clone = {};
    _$jscoverage['nodemock.js'][258]++;
    for (var key in entry) {
      _$jscoverage['nodemock.js'][259]++;
      clone[key] = entry[key];
}
    _$jscoverage['nodemock.js'][261]++;
    return clone;
}
  _$jscoverage['nodemock.js'][264]++;
  function getCurrentEntry() {
    _$jscoverage['nodemock.js'][265]++;
    return entries[currentMockFunction][entries[currentMockFunction].length - 1];
}
  _$jscoverage['nodemock.js'][268]++;
  function addEntry(entry) {
    _$jscoverage['nodemock.js'][269]++;
    entries[currentMockFunction].push(entry);
}
  _$jscoverage['nodemock.js'][272]++;
  function getParamString(params) {
    _$jscoverage['nodemock.js'][274]++;
    var paramString = "(";
    _$jscoverage['nodemock.js'][275]++;
    for (var index in params) {
      _$jscoverage['nodemock.js'][276]++;
      var param = params[index];
      _$jscoverage['nodemock.js'][277]++;
      if (param instanceof Function) {
        _$jscoverage['nodemock.js'][278]++;
        paramString += "function() {}, ";
      }
      else {
        _$jscoverage['nodemock.js'][279]++;
        if (param instanceof RegExp) {
          _$jscoverage['nodemock.js'][280]++;
          paramString += param.toString() + ", ";
        }
        else {
          _$jscoverage['nodemock.js'][282]++;
          paramString += JSON.stringify(param) + ", ";
        }
      }
}
    _$jscoverage['nodemock.js'][286]++;
    if (params[0]) {
      _$jscoverage['nodemock.js'][287]++;
      return paramString = paramString.substring(0, paramString.length - 2) + ")";
    }
    else {
      _$jscoverage['nodemock.js'][289]++;
      return "()";
    }
}
  _$jscoverage['nodemock.js'][291]++;
  ;
  _$jscoverage['nodemock.js'][293]++;
  function deepObjectCheck(expected, actual) {
    _$jscoverage['nodemock.js'][295]++;
    if (expected && actual && (expected.length != actual.length)) {
      _$jscoverage['nodemock.js'][295]++;
      return false;
    }
    _$jscoverage['nodemock.js'][297]++;
    for (var key in expected) {
      _$jscoverage['nodemock.js'][299]++;
      var actualType = typeof actual[key];
      _$jscoverage['nodemock.js'][300]++;
      var expectedType = typeof expected[key];
      _$jscoverage['nodemock.js'][302]++;
      if (actualType != expectedType) {
        _$jscoverage['nodemock.js'][302]++;
        return false;
      }
      _$jscoverage['nodemock.js'][303]++;
      if (actualType == "function") {
        _$jscoverage['nodemock.js'][304]++;
        continue;
      }
      else {
        _$jscoverage['nodemock.js'][305]++;
        if (actualType == "object") {
          _$jscoverage['nodemock.js'][306]++;
          if (! deepObjectCheck(expected[key], actual[key])) {
            _$jscoverage['nodemock.js'][306]++;
            return false;
          }
        }
        else {
          _$jscoverage['nodemock.js'][308]++;
          if (actual[key] != expected[key]) {
            _$jscoverage['nodemock.js'][308]++;
            return false;
          }
        }
      }
}
    _$jscoverage['nodemock.js'][312]++;
    return true;
}
  _$jscoverage['nodemock.js'][313]++;
  ;
  _$jscoverage['nodemock.js'][316]++;
  this.mock(methodName);
}
_$jscoverage['nodemock.js'][321]++;
if (typeof exports != "undefined") {
  _$jscoverage['nodemock.js'][323]++;
  exports.mock = (function (methodName) {
  _$jscoverage['nodemock.js'][324]++;
  return new NodeMock(methodName);
});
  _$jscoverage['nodemock.js'][327]++;
  exports.fail = (function () {
  _$jscoverage['nodemock.js'][328]++;
  return new NodeMock();
});
  _$jscoverage['nodemock.js'][331]++;
  exports.ignore = (function (method) {
  _$jscoverage['nodemock.js'][332]++;
  var nm = new NodeMock();
  _$jscoverage['nodemock.js'][333]++;
  nm.ignore(method);
  _$jscoverage['nodemock.js'][334]++;
  return nm;
});
}
_$jscoverage['nodemock.js'].source = ["/**","","\tThe MIT License","\t","\tCopyright (c) 2011 Arunoda Susiripala","\t","\tPermission is hereby granted, free of charge, to any person obtaining a copy","\tof this software and associated documentation files (the \"Software\"), to deal","\tin the Software without restriction, including without limitation the rights","\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell","\tcopies of the Software, and to permit persons to whom the Software is","\tfurnished to do so, subject to the following conditions:","\t","\tThe above copyright notice and this permission notice shall be included in","\tall copies or substantial portions of the Software.","\t","\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR","\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,","\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE","\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER","\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,","\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN","\tTHE SOFTWARE.",""," */","","function NodeMock(methodName) {","\t","\tvar self = this;","\tvar currentMockFunction = null;","\t","\tvar entries = {};","\t","\tvar mockFunction = function(method, avoid) {","\t\t","\t\tfunction getValidEntry(args) {","\t\t\t","\t\t\t//Iterate over to find a entry matching argument list","\t\t\tfor(var index in entries[method]) {","\t\t\t\tentry = entries[method][index];","\t\t","\t\t\t\tif(entry.executed == false &amp;&amp; deepObjectCheck(entry.args, args)) {","\t\t\t\t\t//increasing executed numbers for that entry","\t\t\t\t\tentry.executed = true;","\t\t\t\t\treturn entry;","\t\t\t\t}","\t\t\t}","\t\t\t","\t\t\treturn false;","\t\t}","\t\t","\t\treturn function() {","\t\t\t//check for argument length","\t\t\tvar entry;","\t\t\t","\t\t\tif(!self[method]) {","\t\t\t\tthrow new Error(\"Mock function '\" + method + \"()' is not defined\");","\t\t\t\t","\t\t\t} else if(!(entry =  getValidEntry(arguments))) {","\t\t\t\t","\t\t\t\tvar expected = \"\";","\t\t\t\tvar alreadyExecuted = false;","\t\t\t\tfor(var key in entries[method]) {","\t\t\t\t\tvar entry = entries[method][key];","\t\t\t\t\tif(entry.executed == false) {","\t\t\t\t\t\texpected += \"\\n\\t\" + getParamString(entry.args);","\t\t\t\t\t} else if(deepObjectCheck(entry.args, arguments)) {","\t\t\t\t\t\talreadyExecuted = true;","\t\t\t\t\t}","\t\t\t\t}","","\t\t\t\texpected += \"\\n\";","\t\t\t\t","\t\t\t\tif(alreadyExecuted) {","\t\t\t\t\tthrow new Error('method: ' + method + getParamString(arguments) + ' already executed');","\t\t\t\t} else {","\t\t\t\t\tthrow new Error(","\t\t\t\t\t\t\"Arguments content passed: \" + getParamString(arguments) + ","\t\t\t\t\t\t\" is not tally with expected: \" + expected + \" in method: '\" + method + \"()'\");","\t\t\t\t}","\t\t\t","\t\t\t} else if(entry.shouldFail) {","\t\t\t\tthrow new Error(\"You should not call: '\" + method+ \"()' with params: \" + getParamString(arguments) + \" on this object\");","\t\t\t}","\t\t\t","\t\t\t//calling the callback","\t\t\tif(entry.callbackIndex != null) {","\t\t\t\tvar func = arguments[entry.callbackIndex];","\t\t\t\tentry.callback = func;","\t\t\t\t","\t\t\t\tif(entry.callbackArgs) {","\t\t\t\t\tif(typeof(func) == \"function\") {","\t\t\t\t\t\tfunc.apply(this, entry.callbackArgs || []);","\t\t\t\t\t} else {","\t\t\t\t\t\tthrow new Error(\"Expected callback is not defined as callback\");","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\t","\t\t\treturn entry.returns;","\t\t};","\t};","\t","\tthis.takes = function() {","\t\tvar entry = getCurrentEntry();","\t\tentry.args = arguments;","\t\treturn this;","\t};","\t\t","\tthis.times = function(expected) {","\t\tvar entry = getCurrentEntry();","\t\tfor(var lc = 0; lc &lt; expected - 1; lc++) {","\t\t\taddEntry(cloneEntry(entry));","\t\t}","\t\treturn this;","\t};","\t","\tthis.returns = function(value) {","\t\tvar entry = getCurrentEntry();","\t\tentry.returns = value;","\t\treturn this;","\t};","\t","\tthis.ctrl = function(index, obj) {","\t\tvar entry = getCurrentEntry();","\t\tentry.callbackIndex = index;","\t\tentry.callbackArgs = false;","\t\t","\t\tobj.trigger = function() {","\t\t\tif(entry.callback) {","\t\t\t\tentry.callback.apply(this, arguments);","\t\t\t} else {","\t\t\t\tthrow new Error(\"There is no callback to control\");","\t\t\t}","\t\t};","\t\t","\t\treturn this;","\t};","\t","\tthis.calls = function() {","\t\t","\t\tif(typeof(arguments[0]) == \"number\") {","\t\t\tvar entry = entries[currentMockFunction][entries[currentMockFunction].length - 1];","\t\t\t","\t\t\tentry.callbackIndex = arguments[0];","\t\t\tif(arguments[1] &amp;&amp; (arguments[1] instanceof Array)) {","\t\t\t\tentry.callbackArgs = arguments[1];","\t\t\t}","\t\t\t","\t\t\treturn this;","\t\t} else if(arguments[0] instanceof Object) {","\t\t\t","\t\t} else {","\t\t\tthrow new Error(\"First arg of the calls() should be the index of the callback\");","\t\t}","\t};","\t","\tthis.assert = function() {","\t\t","\t\tvar success = true;","\t\tfor(var method in entries) {","\t\t\tvar entriesForMethod = entries[method];","\t\t\tentriesForMethod.forEach(function(entry) {","\t\t\t\tif(entry.executed == false) {","\t\t\t\t\tsuccess = false;","\t\t\t\t\tconsole.error(","\t\t\t\t\t\t\t\"method call for: '\" + method + \"()' with params: \" + getParamString(entry.args) + \" was not executed!\\n\"","\t\t\t\t\t);","\t\t\t\t}","\t\t\t});","\t\t}","\t\t","\t\treturn success;","\t};","","\tthis.assertThrows = function() {","\t\tvar success = this.assert();","\t\tif(!success) {","\t\t\tthrow new Error('Nodemock rules breaked!');","\t\t}\t","\t};","\t","\t//Assign the mocking function","\tthis.mock = function(method) {","\t\t","\t\tif(method) {","\t\t\t//let the current mocking method be this","\t\t\tcurrentMockFunction = method;","\t\t\t","\t\t\tif(!this[method]) {","\t\t\t\t","\t\t\t\tentries[currentMockFunction] = [];","\t\t\t\t//assign the mock method","\t\t\t\tthis[method] = mockFunction(method);","\t\t\t}","\t\t\t","\t\t\taddEntry({","\t\t\t\targs: [],","\t\t\t\tcallback: null,","\t\t\t\tcallbackIndex: null,","\t\t\t\tcallbackArgs: [],","\t\t\t\treturns: undefined,","\t\t\t\texecuted: false, // whether the mock entry executed or not","\t\t\t\tshouldFail: false","\t\t\t});","\t\t}","\t\t","\t\treturn this;","\t};","\t","\t/**","\t * After this call when someone calls on this this object is'll","\t * throw an exception","\t */","\tthis.fail = function() {","\t\tvar entry = getCurrentEntry();","\t\tentry.shouldFail = true;","\t\treturn this;","\t};","","\t/**","\t\tcleanup all the rules and the mock methods","\t*/","\tthis.reset = function() {","\t\tentries = {};","\t\tcurrentMockFunction = null;","\t\t","\t\tvar bypass = {","\t\t\t'takes': true,","\t\t\t'times': true,","\t\t\t'returns': true,","\t\t\t'ctrl': true,","\t\t\t'calls': true,","\t\t\t'assert': true,","\t\t\t'assertThrows': true,","\t\t\t'mock': true,","\t\t\t'fail': true,","\t\t\t'reset': true,","\t\t\t'ignore': true","\t\t};","","\t\tfor(var key in this) {","\t\t\tif(!bypass[key]) {","\t\t\t\tdelete this[key];","\t\t\t}","\t\t}\t","\t};","","\t//ignore the mock","\tthis.ignore = function(method) {","\t\t","\t\tthis[method] = function() {};","\t};","","\t//method for cloning entry","\tfunction cloneEntry(entry) {","\t\tvar clone = {};","\t    for(var key in entry) {","\t    \tclone[key] = entry[key];","\t    }","\t    return clone;","\t}","\t","\tfunction getCurrentEntry() {","\t\treturn entries[currentMockFunction][entries[currentMockFunction].length - 1];","\t}","","\tfunction addEntry(entry) {","\t\tentries[currentMockFunction].push(entry);","\t}","\t","\tfunction getParamString(params) {","\t\t","\t\tvar paramString = \"(\";","\t\tfor(var index in params) {","\t\t\tvar param = params[index];","\t\t\tif(param instanceof Function) {","\t\t\t\tparamString += \"function() {}, \";","\t\t\t} else if(param instanceof RegExp) {","\t\t\t\tparamString += param.toString() + \", \";","\t\t\t} else {","\t\t\t\tparamString += JSON.stringify(param) + \", \";","\t\t\t}","\t\t}","\t\t","\t\tif(params[0]) {","\t\t\treturn paramString = paramString.substring(0, paramString.length -2) + \")\";","\t\t} else {","\t\t\treturn '()';","\t\t}","\t};","\t","\tfunction deepObjectCheck(expected, actual) {","\t\t\t","\t\tif(expected &amp;&amp; actual &amp;&amp; (expected.length != actual.length)) return false;","\t\t","\t\tfor(var key in expected) {","\t\t\t","\t\t\tvar actualType = typeof(actual[key]);","\t\t\tvar expectedType = typeof(expected[key]);","\t\t\t","\t\t\tif(actualType != expectedType) return false;","\t\t\tif(actualType == \"function\") {","\t\t\t\tcontinue;","\t\t\t} else if(actualType == \"object\") {","\t\t\t\tif(!deepObjectCheck(expected[key]\t,actual[key])) return false;","\t\t\t} else {","\t\t\t\tif(actual[key] != expected[key]) return false;","\t\t\t}","\t\t}","\t\t","\t\treturn true;","\t};","\t","\t//initialize the mocking","\tthis.mock(methodName);","\t","}","","//Supporting NodeJS CommonJS module system","if(typeof(exports) != \"undefined\") {","","\texports.mock = function(methodName) {","\t\treturn new NodeMock(methodName);","\t};","\t","\texports.fail = function() {","\t\treturn new NodeMock();","\t};","","\texports.ignore = function(method) {","\t\tvar nm = new NodeMock();","\t\tnm.ignore(method);","\t\treturn nm;","\t};","}"];
